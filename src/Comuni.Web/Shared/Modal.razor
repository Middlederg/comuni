﻿<div class="modal h-screen w-full fixed left-0 top-0 flex justify-center items-center bg-black bg-opacity-50 z-30 @(hidden ? "hidden" : "")">
    <div class="bg-white rounded shadow-lg mx-8 max-w-7xl h-5/6 overflow-y-auto">
        <!-- modal header -->
        <div class="border-b px-4 py-2 flex justify-between items-center">

            <h3 class="flex justify-between items-center font-semibold text-lg w-full">
                @Title
            </h3>

            <div role="group" class="flex items-center">
                @if (ButtonContent != null)
                {

                    <CustomButton OnClick="OnAccepted" Height="CustomButton.ButtonHeight.Small" Style="@Styles.ButtonOutlined">

                        <svg class="fill-current text-black" xmlns="http://www.w3.org/2000/svg" width="18" height="18"
                             viewBox="0 0 18 18">
                            <path d="M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z">
                            </path>
                        </svg>

                    </CustomButton>
                }
                
                <CustomButton OnClick="Hide" Height="CustomButton.ButtonHeight.Small" Style="@Styles.ButtonOutlined">

                    <svg class="fill-current text-black" xmlns="http://www.w3.org/2000/svg" width="18" height="18"
                         viewBox="0 0 18 18">
                        <path d="M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z">
                        </path>
                    </svg>

                </CustomButton>
            </div>
        </div>

        <div class="px-6 py-3 mb-4">

            @Content

        </div>
    </div>
</div>

@code {
    private bool hidden = true;

    public void Show() => hidden = false;
    private void Hide() => hidden = true;

    [Parameter]
    public EventCallback OnModalAccepted { get; set; }

    [Parameter]
    public RenderFragment? Title { get; set; }

    [Parameter]
    public RenderFragment? ButtonContent { get; set; }

    [Parameter]
    public RenderFragment? Content { get; set; }


    private async Task OnAccepted()
    {
        hidden = true;
        await OnModalAccepted.InvokeAsync(null);
    }
}